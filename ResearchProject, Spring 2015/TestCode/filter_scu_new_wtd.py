""" 
Format of filtered document
['100', '|', '0.196697618504', '|', '5', '|', '3', '| ', '0.786790474017', ' | ', '0.0', ' | ', '0.786790474017']
  scu_id, '|',new wtd score ,'|', scu_score,'|', ng_len, '| ', cos_sim_mean, ' | ', sd, ' | ', cos_sim
  lines_seen is used to maintain unique files
"""

import re, os, glob, sys

def get_list(str_scu):
	""" Given a comma separated "105', '101'"; return [105, 101] i.e list of integer scu_id's """
	scu_list = str_scu.split(',')
	scu_list_int = []
	if len(str_scu) > 0:
		scu_list_int = [int(scu_id) for scu_id in scu_list]
	return scu_list_int


def get_valid_senid(senid):
	"""For a string extracted from the os.path such as '/123./' will output '123' """
	ldigits = [e for e in senid if e.isdigit()]
	return ''.join(ldigits)


def filter_scores(path_doc, path_doc_write):
	print path_doc, path_doc_write
	if path_doc == "":
		path_doc = "Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/"
	if path_doc_write == "":
		path_doc_write = "Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/new_wtd_files/"

	if not os.path.exists(path_doc_write): # Recursively creating file directory!
		os.makedirs(path_doc_write)
		print "Creating output directory for filtered scu files: ", path_doc_write

	for filename in glob.glob(os.path.join(path_doc, '*.best.scu.wtd.new')):
		sen_no = filename[len(path_doc):filename.find('.best.scu.wtd.new')]
		sen_id = get_valid_senid(sen_no)
		print "Starting senid : ",sen_id
		wtd_file = os.path.join(path_doc, sen_id + '.best.scu.wtd.new')
		st_file = os.path.join(path_doc_write, sen_id+'.best.scu.wtd.new.st')
		temp_file = os.path.join(path_doc_write, sen_id+'.best.scu.wtd.new.st.temp')
		uq_sorted_file =  os.path.join(path_doc_write, sen_id+'.best.scu.wtd.new.st.unique')
		# Generate files here #
		os.system("sort -u -rn -t'|' -k3,3 "+ wtd_file +" > " + st_file)
		os.system("sort -u -t'|' -k2,2 "+ st_file +" > " + temp_file)
		os.system("sort -u -rn -t'|' -k3,3 "+ temp_file +" > " + uq_sorted_file)
		os.remove(temp_file)	
		print 'done with ', sen_id
		# Completed file generation #
	

def main(path_doc, path_doc_write):
    filter_scores(path_doc, path_doc_write)


def usage():
    print """
    Usage: Filter the 'Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/*.best.scu.wtd.new'
    files generated by score_scu_segments_stats.py\n
    Correct usage: (Arg1) Input score files path (Arg2) Output path | Specify path in quotes to avoid errors.
    'python filter_scu_new_wtd.py 'Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/' 'Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/new_wtd_files12/''"""


if __name__ == "__main__": 
	if len(sys.argv) != 3:
		usage()
		sys.exit(-1)
	# path_doc = "Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/"
	# path_doc_write = "Sentences/Unique_Sets_new/12_10_09_MATTER.pyr/1/new_wtd_files/"
	path_doc = sys.argv[1] 
	path_doc_write = sys.argv[2]
	main(path_doc, path_doc_write)






#####################################################################################################################

# os.system("cut -d\| -f 2 1.unique.st")
# os.system("sort -u -r -t'|' -k3,3 -k4,4 -k2,2 Sentences/Unique_Sets/12_10_09_MATTER.pyr/1/9.best.scu.filtered_123 > Sentences/Unique_Sets/12_10_09_MATTER.pyr/1/9.best.scu.filtered.st100")
	

# http://www.cyberciti.biz/faq/python-execute-unix-linux-command-examples/
# http://en.wikipedia.org/wiki/Sort_(Unix)#Sorting_a_pipe_delimited_file
# http://stackoverflow.com/questions/11957845/unix-sort-descending-order | number as the column key (n)

# Things I do : #
#	Gen new files first
#	run filter on it - where while filtering itself, print in a new doc computing new score and without first col
#	make file unique and sort by col 1

""" Do a unix command and sort by column 2 

sort -r -t'|' -k2,2 9.best.scu.filtered > 9.best.scu.filtered 
sort -r -t'|' -k2,2 -k3,3 9.best.scu.filtered > 9.best.scu.filtered.st
New file generated will be filtered and sorted !!

 os.system("sort -u -t'|' -k2,2 7.best.scu.filtered.st > 7.unique")
 os.system("sort -r -u -t'|' -k3,3 7.unique > 7.unique.st")

cut -d\| -f 2 1.unique.st
Used to extract the scu column
"""